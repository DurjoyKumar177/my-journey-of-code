# Python-এ shallow copy ব্যবহার করে যখন আপনি একটি লিস্টের ডেটা কপি করেন, তখন কপিকৃত ডেটাতে কোনো পরিবর্তন আনলে মূল লিস্টের ডেটা সাধারণত প্রভাবিত হয় না। তবে, যদি আপনার লিস্টের মধ্যে আরেকটি লিস্ট (নেস্টেড লিস্ট) থাকে, তাহলে সেই নেস্টেড লিস্টের ডেটা পরিবর্তন করলে মূল লিস্টের নেস্টেড ডেটাও পরিবর্তিত হবে। এর কারণ হলো, শ্যালো কপি শুধুমাত্র বাইরের স্তরের অবজেক্টগুলোকে কপি করে। ভেতরের নেস্টেড অবজেক্টগুলো (যেমন নেস্টেড লিস্ট) রেফারেন্স দ্বারা যুক্ত থাকে। অর্থাৎ, কপি করা লিস্ট এবং মূল লিস্ট উভয়ই একই নেস্টেড লিস্ট অবজেক্টকে নির্দেশ করে।
# Example of Shallow Copy in Python

import copy

Original =[1, [2, 3], 4]
shallow = copy.copy(Original)
shallow[0] = 99  # কপি লিস্টের প্রথম উপাদান পরিবর্তন করলে মূল লিস্টের উপাদান প্রভাবিত হবে না
shallow[1][0] = 99  # কপি লিস্টের নেস্টেড লিস্টের প্রথম উপাদান পরিবর্তন করলে মূল লিস্টের নেস্টেড উপাদানও পরিবর্তিত হবে
print("Original:", Original)  # Output: [1, [99, 3], 4]
print("Shallow Copy:", shallow)  # Output: [99, [99, 3], 4]

# এই উদাহরণে, shallow কপি করার পর যখন আমরা নেস্টেড লিস্টের প্রথম উপাদান পরিবর্তন করি, তখন মূল লিস্টের নেস্টেড উপাদানও পরিবর্তিত হয়।
# এর মানে হলো, শ্যালো কপি শুধুমাত্র বাইরের অবজেক্টগুলোকে কপি করে এবং নেস্টেড অবজেক্টগুলোকে রেফারেন্স করে।
# এই কারণে, শ্যালো কপি ব্যবহার করার সময় সতর্ক থাকতে হবে, কারণ নেস্টেড অবজেক্টে পরিবর্তন করলে মূল অবজেক্টেও পরিবর্তন আসবে।

# কেন এমন হয়?

# Python-এ shallow copy শুধু বাইরের কন্টেইনার (লিস্ট, ডিকশনারি) নতুন করে তৈরি করে, কিন্তু ভিতরের অবজেক্টগুলোর reference কপি করে।
# তাই, যদি বাইরের লিস্টে কোনো পরিবর্তন করেন (যেমন: shallow_copy[0]=100), তাহলে শুধু shallow_copy-তেই পরিবর্তন হবে, মূল লিস্টে হবে না।
# কিন্তু যদি ভিতরের mutable ডেটা (যেমন: nested list) পরিবর্তন করেন (যেমন: shallow_copy[1][0]=99), তাহলে দুইটা লিস্টেই সেই পরিবর্তন দেখা যাবে, কারণ দুটোই একই nested list কে reference করছে।

# এই সমস্যার সমাধান করার জন্য আছে deep copy যা nested objects কে আলাদা করে copy করে, তাই original object এর কোনো change deep copy তে প্রভাবিত হবে না।
# Example of Deep Copy in Python

import copy

Original = [1, [2, 3], 4]
deep = copy.deepcopy(Original)
deep[0] = 99  # কপি লিস্টের প্রথম উপাদান পরিবর্তন করলে মূল লিস্টের উপাদান প্রভাবিত হবে না
deep[1][0] = 99  # কপি লিস্টের নেস্টেড লিস্টের প্রথম উপাদান পরিবর্তন করলে মূল লিস্টের নেস্টেড উপাদানও পরিবর্তিত হবে না
print("Original:", Original)  # Output: [1, [2, 3], 4]
print("Deep Copy:", deep)  # Output: [99, [99, 3], 4]